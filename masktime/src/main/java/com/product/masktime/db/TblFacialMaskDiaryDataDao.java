package com.product.masktime.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.product.masktime.db.TblFacialMaskDiaryData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TBL_FACIAL_MASK_DIARY_DATA.
*/
public class TblFacialMaskDiaryDataDao extends AbstractDao<TblFacialMaskDiaryData, Long> {

    public static final String TABLENAME = "TBL_FACIAL_MASK_DIARY_DATA";

    /**
     * Properties of entity TblFacialMaskDiaryData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DiaryDate = new Property(1, String.class, "DiaryDate", false, "DIARY_DATE");
        public final static Property DiaryTime = new Property(2, String.class, "DiaryTime", false, "DIARY_TIME");
        public final static Property PicName = new Property(3, String.class, "PicName", false, "PIC_NAME");
        public final static Property DiaryContent = new Property(4, String.class, "DiaryContent", false, "DIARY_CONTENT");
        public final static Property QuestionId = new Property(5, String.class, "QuestionId", false, "QUESTION_ID");
        public final static Property DiaryTitle = new Property(6, String.class, "DiaryTitle", false, "DIARY_TITLE");
        public final static Property CloudFlag = new Property(7, String.class, "CloudFlag", false, "CLOUD_FLAG");
        public final static Property Fill = new Property(8, String.class, "Fill", false, "FILL");
        public final static Property UpdateTime = new Property(9, String.class, "UpdateTime", false, "UPDATE_TIME");
    };


    public TblFacialMaskDiaryDataDao(DaoConfig config) {
        super(config);
    }
    
    public TblFacialMaskDiaryDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TBL_FACIAL_MASK_DIARY_DATA' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DIARY_DATE' TEXT NOT NULL ," + // 1: DiaryDate
                "'DIARY_TIME' TEXT," + // 2: DiaryTime
                "'PIC_NAME' TEXT," + // 3: PicName
                "'DIARY_CONTENT' TEXT," + // 4: DiaryContent
                "'QUESTION_ID' TEXT," + // 5: QuestionId
                "'DIARY_TITLE' TEXT," + // 6: DiaryTitle
                "'CLOUD_FLAG' TEXT," + // 7: CloudFlag
                "'FILL' TEXT," + // 8: Fill
                "'UPDATE_TIME' TEXT);"); // 9: UpdateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TBL_FACIAL_MASK_DIARY_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TblFacialMaskDiaryData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDiaryDate());
 
        String DiaryTime = entity.getDiaryTime();
        if (DiaryTime != null) {
            stmt.bindString(3, DiaryTime);
        }
 
        String PicName = entity.getPicName();
        if (PicName != null) {
            stmt.bindString(4, PicName);
        }
 
        String DiaryContent = entity.getDiaryContent();
        if (DiaryContent != null) {
            stmt.bindString(5, DiaryContent);
        }
 
        String QuestionId = entity.getQuestionId();
        if (QuestionId != null) {
            stmt.bindString(6, QuestionId);
        }
 
        String DiaryTitle = entity.getDiaryTitle();
        if (DiaryTitle != null) {
            stmt.bindString(7, DiaryTitle);
        }
 
        String CloudFlag = entity.getCloudFlag();
        if (CloudFlag != null) {
            stmt.bindString(8, CloudFlag);
        }
 
        String Fill = entity.getFill();
        if (Fill != null) {
            stmt.bindString(9, Fill);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(10, UpdateTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TblFacialMaskDiaryData readEntity(Cursor cursor, int offset) {
        TblFacialMaskDiaryData entity = new TblFacialMaskDiaryData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // DiaryDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DiaryTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // PicName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DiaryContent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // QuestionId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // DiaryTitle
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CloudFlag
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Fill
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // UpdateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TblFacialMaskDiaryData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDiaryDate(cursor.getString(offset + 1));
        entity.setDiaryTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPicName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDiaryContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQuestionId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDiaryTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCloudFlag(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFill(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TblFacialMaskDiaryData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TblFacialMaskDiaryData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
